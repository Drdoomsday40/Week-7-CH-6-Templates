// FILE: sequence4.template
// Written by:      Lucien Maurice
// Email:           luciencmaurice@gmail.com
// TEMPLATE CLASS implemented:
//   sequence<Item> (see sequence4.h for documentation)
// INVARIANT for the sequence ADT:
//   1. The items in the sequence are stored on a linked list,
//      in order from the start of the sequence at the head of the list;
//   2. The head pointer of the list is stored in the member variable head_ptr;
//   3. The tail pointer of the list is stored in the member variable tail_ptr;
//   4. If there is a current item, then the cursor points to the node that
//      contains this item; otherwise the cursor is NULL.
//   5. If there is an item before the current item, then the precursor points
//      to the node that contains this item; otherwise the precursor is NULL.
//   3. The total number of items in the list is stored in the member variable
//      many_nodes.

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides NULL, rand, size_t
#include "node2.h"  // Provides node and the linked list functions
#include "sequence4.h"
using namespace std;

namespace main_savitch_6B
{
    template <class Item>
    void list_piece(
	const node<Item>* start_ptr, const node<Item>* end_ptr,
	node<Item>*& head_ptr, node<Item>*& tail_ptr
    )
    // Precondition: start_ptr and end_ptr are pointers to nodes on the same
    // linked list, with the start_ptr node at or before the end_ptr node.
    // Postcondition: head_ptr and tail_ptr are the head and tail pointers
    // for a new list that contains the items from start_ptr up to but
    // not including end_ptr.  The end_ptr may also be NULL, in which case
    // the new list contains elements from start_ptr to the end of the list.
    // Library facilities used: cstdlib
    {
	head_ptr = NULL;
	tail_ptr = NULL;

	// Handle the case of the empty list.
	if (start_ptr == end_ptr)
	    return;
    
	// Make the head node for the newly created list, and put data in it.
	list_head_insert(head_ptr, start_ptr->data( ));
	tail_ptr = head_ptr;
    
	// Copy the rest of the nodes one at a time, adding at the tail of new list.
	start_ptr = start_ptr->link( ); 
	while (start_ptr != end_ptr)
	{
	    list_insert(tail_ptr, start_ptr->data( ));
	    tail_ptr = tail_ptr->link( );
	    start_ptr = start_ptr->link( );
	}
    }
    
    template <class Item>
    sequence<Item>::sequence( )
    // Library facilities used: cstdlib
    {
	head_ptr = tail_ptr = cursor = precursor = NULL;
	many_nodes = 0;
    }

    template <class Item>
    sequence<Item>::sequence(const sequence& source)
    // Library facilities used: cstdlib, node1.h
    {
	if (source.cursor == NULL)
	{   // There is no current item in the source list:
	    list_copy(source.head_ptr, head_ptr, tail_ptr);
	    cursor = precursor = NULL;
	}
	else if (source.precursor == NULL)
	{   // The current item in the source is at its head:
	    list_copy(source.head_ptr, head_ptr, tail_ptr);
	    cursor = head_ptr;
	    precursor = NULL;
	}
	else
	{   // The current item in the source is not at its head:
	    list_piece(source.head_ptr, source.cursor, head_ptr, precursor);
	    list_piece(source.cursor, (node<double>*)NULL, cursor, tail_ptr);
	    precursor->set_link(cursor);
	}
        many_nodes = source.many_nodes;
    }
    
    template <class Item>
    sequence<Item>::~sequence( )
    // Library facilities used: node1.h
    {
        list_clear(head_ptr);
        many_nodes = 0;
    }

    template <class Item>
    void sequence<Item>::start( )
    // Library facilities used: cstdlib
    {
	precursor = NULL;
	cursor = head_ptr;
    }
	
    template <class Item>
    void sequence<Item>::advance( )
    // Library facilities used: node1.h
    {
	assert(is_item());
	precursor = cursor;
	cursor = cursor->link( );
	if (cursor == NULL)
	    precursor = NULL;
    }

    template <class Item>
    void sequence<Item>::insert(const value_type& entry)
    // Library facilities used: cstdlib, node1.h
    {
	if (precursor == NULL)
	{   // The new entry goes at the front:
	    list_head_insert(head_ptr, entry);
	    cursor = head_ptr;
	    if (tail_ptr == NULL)
		tail_ptr = head_ptr; // There were no other nodes.
	}
	else
	{   // The new entry goes between precursor and cursor,
	    // and the cursor is set to point at this new entry.
	    list_insert(precursor, entry);
	    cursor = precursor->link( );
	}
	++many_nodes;
    }

    template <class Item>
    void sequence<Item>::attach(const value_type& entry)
    // Library facilities used: node1.h
    {
	if (tail_ptr == NULL)
	    insert(entry); // First node of the list
	else if (cursor == NULL)
	{   // The new entry goes after the current tail:
	    list_insert(tail_ptr, entry);
	    precursor = tail_ptr;
	    cursor = tail_ptr = precursor->link( );
	    ++many_nodes;
	}
	else
	{   // The new entry goes after the current cursor:
	    list_insert(cursor, entry);
	    precursor = cursor;
	    cursor = precursor->link( );
	    if (tail_ptr == precursor)
		tail_ptr = cursor;
	    ++many_nodes;
	}
    }

    template <class Item>
    void sequence<Item>::remove_current( )
    // Library facilities used: cassert, cstdlib, node1.h
    {
	assert(is_item( ));    
	if (cursor == head_ptr)
	{   // Remove the front node:
	    list_head_remove(head_ptr);
	    cursor = head_ptr;
	    if (cursor == NULL)
		tail_ptr = NULL; // No more nodes on the list.
	}
	else 
	{   // Remove a node that is not at the head:
	    list_remove(precursor);
	    cursor = precursor->link( );
	    if (cursor == NULL)
	    {   // We just removed the old tail node:
		tail_ptr = precursor;
		precursor = NULL;
	    }
	}
	--many_nodes;
    }
	
    template <class Item>
    void sequence<Item>::operator =(const sequence& source)
    // Library facilities used: cstdlib, node1.h
    {
	if (this == &source)
            return;

	list_clear(head_ptr);
	if (source.cursor == NULL)
	{   // There is no current item in the source list:
	    list_copy(source.head_ptr, head_ptr, tail_ptr);
	    cursor = precursor = NULL;
	}
	else if (source.precursor == NULL)
	{   // The current item in the source is at its head:
	    list_copy(source.head_ptr, head_ptr, tail_ptr);
	    cursor = head_ptr;
	    precursor = NULL;
	}
	else
	{   // The current item in the source is not at its head:
	    list_piece(source.head_ptr, source.cursor, head_ptr, precursor);
	    list_piece(source.cursor, (node<double>*)NULL, cursor, tail_ptr);
	    precursor->set_link(cursor);
	}
        many_nodes = source.many_nodes;
    }

    template <class Item>
    Item sequence<Item>::current( ) const
    // Library functions used: cassert, node1.h
    {
	assert(is_item( ));
	return cursor->data( );
    }
}
